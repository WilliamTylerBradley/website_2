{
  "hash": "e726a76fc4882458e9e545184859ce7a",
  "result": {
    "markdown": "---\ntitle: \"Generative Art Twitter Bot with R and Github Actions\"\ndescription: \"Automatic art generated daily\"\ndate: \"2022-08-31\"\ncategories: [R, Generative Art]\nimage: \"flowfieldfigments.png\"\nengine: knitr\n---\n\n::: {.cell}\n<style type=\"text/css\">\n.figure-img {\n border: 1px solid #CAD3C1;\n}\n</style>\n:::\n\n\nI'm assuming you're familiar with Twitter terminology (tweet, post, etc.), have a github account.\n\nAt this point, you have code to produce your generative art into an output file. \n\n# what output files are available for Twitter?\n\nI would love to have someone write a better blog post than this one. \n\n<hr>\n<center>\n<h2>Twitter Account</h2>\n</center>\n<hr>\n\nI list creating the Twitter account as the second step. However, it's not a bad idea to do this first so all the names match. I created the package as \"flowfieldfigments\" and then found out Twitter usernames cannot be longer than 15 characters. That's why the Twitter account is \"flw_fld_fgmnts\" instead.\n\nI had to log out of my other account to sign up for a new one. The process was pretty easy after that.\n\nI used Oscar Baruffa's trick of adding \"+something\" to the end of my normal gmail account. So instead of of \"gmailaccount.gmail.com\", I have \"gmailaccount+twitterbot1.gmail.com\". This setup sent all the emails to the normal account without any issues.\n\nYou'll need to add your phone number. I had an issue where I couldn't use my normal phone number because it was associated with another account. I had to take my number off my first account, use it for the new one, then later on take it off the new one, and add it back to the old one. You don't have to add it back to the old one, but you'll only received texts for the associated account.\n\nTo build out a bot, you'll need a [Developer Account](https://developer.twitter.com/en). You'll need to fill out all the information here according to your situation.\n\nAfter creating the account, on the [Developer Portal](https://developer.twitter.com/en), you'll need to apply for Elevated access. It says this can take awhile, but it was under a minute for me. (If you don't do this, you'll end up with an error message like: \"You currently have Essential access which includes access to Twitter API v2 endpoints only. If you need access to this endpoint, youâ€™ll need to apply for Elevated access via the Developer Portal. You can learn more [here](https://developer.twitter.com/en/docs/twitter-api/getting-started/about-twitter-api#v2-access-leve\").\n\n![Elevated Access Screenshot](elevated_access_screenshot.png)\n\nYou'll also need to set up your user authentication settings. \n\n![User Authentication Settings Screenshot](user_auth_1.png)\n\n![QAUTH Settings Screenshot](user_auth_2.png)\n\n![General Authentication Settings Screenshot](user_auth_3.png)\n\nFor this next section, we'll test out posting tweets using R code. This will involve using keys to your account. After testing, these will be moved to an appropriate location, but until then don't push any of this code to Github. You can find them on the Developer Portal under your Project, under \"Keys and tokens\", then \"Regenerate\" under \"API Key and Secret\" and \"Access Token and Secret\". Copy these into an R file like the following one.\n\n```r\n# Set up rtweet\nlibrary(rtweet)\nvignette(\"auth\", package = \"rtweet\")\n\nauth <- rtweet::rtweet_bot(api_key = \"longstringofLETTERS&numbers\", \n           api_secret = \"SECONDlongstringofLETTERS&numbers\", \n           access_token = \"THIRDlongstringofLETTERS&numbers\", \n           access_secret = \"FOURTHlongstringofLETTERS&numbers\")\n           \nrtweet::post_tweet(status = \"This is a test tweet.\"\n                   token = auth)\n```\n\nHopefully, if I've written everything correctly and you followed it accordingly, you should have a tweet on your bot's account that says \"This is a test tweet.\" after you run that code.\n\nNow you can add your generative art. The following is the base code I used. For media, you'll need to add alt text. For successive tweets, the status will have to change. I generate mine so it changes everyday. I saved this as [\"tweet_art.R\"](https://github.com/WilliamTylerBradley/flowfieldfigmentsbot/blob/main/tweet_art.R).\n\n```r\nlibrary(rtweet)\n\nauth <- rtweet::rtweet_bot(api_key = \"longstringofLETTERS&numbers\", \n           api_secret = \"SECONDlongstringofLETTERS&numbers\", \n           access_token = \"THIRDlongstringofLETTERS&numbers\", \n           access_secret = \"FOURTHlongstringofLETTERS&numbers\")\n           \n# Generative art code\nlibrary(flowfieldfigments)\nset.seed(as.numeric(format(Sys.Date(),\"%Y%m%d\")))\n\nday <- as.numeric(strftime(Sys.Date(), format = \"%j\")) + 1\n\nseeds <- sample(1:10000, 3)\nsize <- sample(seq(50, 1500), 1)\nanchor_layout <- c(\"random\", \"spiral\", \"grid\")[day %% 3 + 1]\ncolor_scheme <- c(\"full\", \"subset\")[day %% 2 + 1]\ncolor_subset_center <- runif(1, 0, 360)\ncolor_subset_width <- runif(1, 30, 90)\nhue_turn <- runif(1, 0, 360)\nalpha_taper <- c(\"start\", \"end\", \"both\")[day %% 3 + 1]\n\n# I used a temp file, but you can save and pull it instead\noutput_file <- tempfile(fileext = \".png\")\nflowfieldfigments::create_png(seeds = seeds, \n                              size = size, \n                              anchor_layout = anchor_layout, \n                              hue_turn = hue_turn, \n                              color_scheme = color_scheme,\n                              color_subset_center = color_subset_center, \n                              color_subset_width = color_subset_width,\n                              alpha_taper = alpha_taper, \n                              output_file = output_file)\n\nstatus <- paste0(\"set.seed(\", seed, \")\")\nalt_text <- \"Generative art featuring flow fields. Paths are various colors on a white background.\"\nrtweet::post_tweet(status = status,\n                   media = output_file,\n                   token = auth,\n                   media_alt_text = alt_text)\n```                   \n\nAt this point, you should be able to post your generative art to your bot's Twitter account. You'll want to try out a lot of the options to make sure your output looks good. I've noticed videos can be grainy, but refreshing the page can fix it.\n\n<hr>\n<center>\n<h2>Github</h2>\n</center>\n<hr>\n\nFor the rest of the work, you'll be automating the process using [Github Actions](https://docs.github.com/en/actions). To do this, you'll have to push all your code/setup onto Github's computers and tell them to run it. \n\nTo get Github to run everything, you'll need to give:\n\n- Keys to your Twitter account\n\n- A file for setting up what you need to run the code file\n\n- A code file to run \n\nYou'll need to create a blank [Github repository](https://github.com/WilliamTylerBradley/flowfieldfigmentsbot) or one based on the R project you're using (but make sure to NOT push up the code file with your Twitter keys!).\n\n### Keys to your Twitter account\n\nTo give your bot's keys to Github, you'll save the \"longstringofLETTERS&numbers\" from your R code to Github Actions secrets. These are under your repo's \"Settings\" on the top ribbon, then under \"Security\" on the left side panel, then \"Secrets\", then \"Actions\". You'll add a new repository secret (click \"New Repository Secret) for each of the `rtweet::rtweet_bot`'s parameters (`api_key`, `api_secret`, `access_token`, and `access_secret`). I added a prefix to each of the names then the appropriate title. This way I can use similar names for other Twitter bots. The \"longstringofLETTERS&numbers\" goes in the \"Secret*\" box. Make sure you don't add any whitespace to the front or back.\n\n![Secrets Screenshot](secrets.png)\n\nNow, go back to the code file and update it to use the Github Secrets. All you have to do is replace the \"longstringofLETTERS&numbers\" with \"Sys.getenv(\"SecretName\")\".\n\nYou should be able to test it out with a small test file like this one (or just cut straight to your main file). I found running a small test file was way easier to debug. So, that's what I recommend. Save this as \"test.R\" or something. \n\n```r\n#...\nauth <- rtweet::rtweet_bot(\n  api_key = Sys.getenv(\"FFF_TWITTER_API_KEY\"),\n  api_secret = Sys.getenv(\"FFF_TWITTER_API_KEY_SECRET\"),\n  access_token = Sys.getenv(\"FFF_TWITTER_ACCESS_TOKEN\"),\n  access_secret = Sys.getenv(\"FFF_TWITTER_ACCESS_TOKEN_SECRET\")\n)\n\nrtweet::post_tweet(status = \"This is a test tweet again.\",\n                   token = auth)\n```\n\n### A file for setting up what you need to run the code file\n\nNow you're going to set up the file for using Github Actions. I went to \"Actions\" under the repo's top ribbon, then used the \"Set up workflow yourself\" option. You'll want to create a file like this one:\n\n```yaml\nname: flowfieldfigmentsbot\non:\n  workflow_dispatch:\n  \njobs:\n  flowfieldsfigmentbot-post:\n    runs-on: macOS-latest\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n      FFF_TWITTER_API_KEY: ${{ secrets.FFF_TWITTER_API_KEY }}\n      FFF_TWITTER_API_KEY_SECRET: ${{ secrets.FFF_TWITTER_API_KEY_SECRET }}\n      FFF_TWITTER_ACCESS_TOKEN: ${{ secrets.FFF_TWITTER_ACCESS_TOKEN }}\n      FFF_TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.FFF_TWITTER_ACCESS_TOKEN_SECRET }}\n    steps:\n      - uses: actions/checkout@main\n      - uses: r-lib/actions/setup-r@v2\n      - name: Install rtweet package\n        run: Rscript -e 'install.packages(\"rtweet\", dependencies = TRUE)'\n      - name: Create and post tweet\n        run: Rscript test.R\n```\n\n(I might have had to pull the changes into my local repo, added the file, then pushed it up, but I can't remember exactly. Somehow you need to end up with a similar file in your repo, under .github/workflows folder.)\n\nI named this file \"main.yml\". The `name` of the workflow is \"flowfieldfigmentsbot\". The `on: workflow_dispatch:` allows you to click a button to run. We'll update this to run on a schedule later.\n\nI used `macOS-latest` for the environment because I developed it on a mac. Feel free to change the [runner image](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners).\n\nThe `env:` information needs to match what you saved in the Github Secrets AND what you wrote in the \"test.R\" file for the part before the colon. This is how Github accesses your Twitter account. I named mine the same for both parts for simplicity, but that's not required.\n\nThe `steps:` section accesses the repo, sets up R, installs `rtweet`, and runs the code in \"test.R\".\n\nTo test everything, under \"Actions\" there should be an option under \"Workflows\" for your code. Click \"Run workflow\" to get it started. Sometimes it takes a few minutes. So make sure to chill out a second instead of clicking it a bunch of times.\n\n![Actions](actions.png)\n\nYour bot's Twitter account should have a new tweet with \"This is a test tweet again.\" If you try this again without changing the message, you'll probably get an error about creating tweets with the same status in a row.\n\nIf you get a \"Could not authenticate you.\" error code 32 message, you missed adding the \"GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\" line.\n\n### A code file to run\n\nNow, you need to add the generative art piece back. For this example, I added `devtools` to install the package from Github. This way, Github has access to the generative art code. If you're using a script instead, you can copy-paste the code in, `source` it, or run it.\n\n```r\nlibrary(rtweet)\nlibrary(devtools)\n\ndevtools::install_github(\"WilliamTylerBradley/flowfieldfigments\")\nlibrary(flowfieldfigments)\n\nauth <- rtweet::rtweet_bot(\n  api_key = Sys.getenv(\"FFF_TWITTER_API_KEY\"),\n  api_secret = Sys.getenv(\"FFF_TWITTER_API_KEY_SECRET\"),\n  access_token = Sys.getenv(\"FFF_TWITTER_ACCESS_TOKEN\"),\n  access_secret = Sys.getenv(\"FFF_TWITTER_ACCESS_TOKEN_SECRET\")\n)\n\nseed <- as.numeric(format(Sys.Date(),\"%Y%m%d\"))\nset.seed(seed)\n\nday <- as.numeric(strftime(Sys.Date(), format = \"%j\")) + 1\n\nseeds <- sample(1:100000, 3)\nsize <- sample(seq(50, 1500), 1)\nanchor_layout <- c(\"random\", \"spiral\", \"grid\")[day %% 3 + 1]\ncolor_scheme <- c(\"full\", \"subset\")[day %% 2 + 1]\ncolor_subset_center <- runif(1, 0, 360)\ncolor_subset_width <- runif(1, 30, 90)\nhue_turn <- runif(1, 0, 360)\nmedia <- c(\"png\", \"gif\", \"png\", \"gif\", \"png\")[day %% 5 + 1]\nmovement <- c(\"\", \"march\", \"\", \"glide\", \"\")[day %% 5 + 1]\nalpha_taper <- c(\"start\", \"\", \"end\", \"\", \"both\")[day %% 5 + 1]\n\nif(media == \"png\") {\n  output_file <- tempfile(fileext = \".png\")\n  \n  flowfieldfigments::create_png(seeds = seeds, \n                                size = size, \n                                anchor_layout = anchor_layout, \n                                hue_turn = hue_turn, \n                                color_scheme = color_scheme,\n                                color_subset_center = color_subset_center, \n                                color_subset_width = color_subset_width,\n                                alpha_taper = alpha_taper, \n                                output_file = output_file)\n} else {\n  output_file <- tempfile(fileext = \".gif\")\n  \n  flowfieldfigments::create_gif(seeds = seeds, \n                                size = size, \n                                anchor_layout = anchor_layout, \n                                hue_turn = hue_turn, \n                                color_scheme = color_scheme,\n                                color_subset_center = color_subset_center, \n                                color_subset_width = color_subset_width,\n                                movement = movement, \n                                output_file = output_file)\n}\n\nstatus <- paste0(\"set.seed(\", seed, \")\")\nalt_text <- \"Generative art featuring flow fields. Paths are various colors on a white background.\"\nrtweet::post_tweet(status = status,\n                   media = output_file,\n                   token = auth,\n                   media_alt_text = alt_text)\n```\n\nFor the yaml file, you might need to add a line to install `devtools`.\n\n```yaml\nname: flowfieldfigmentsbot\non:\n  workflow_dispatch:\n  \n  jobs:\n  flowfieldsfigmentbot-post:\n  runs-on: macOS-latest\n  env:\n    GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n    FFF_TWITTER_API_KEY: ${{ secrets.FFF_TWITTER_API_KEY }}\n    FFF_TWITTER_API_KEY_SECRET: ${{ secrets.FFF_TWITTER_API_KEY_SECRET }}\n    FFF_TWITTER_ACCESS_TOKEN: ${{ secrets.FFF_TWITTER_ACCESS_TOKEN }}\n    FFF_TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.FFF_TWITTER_ACCESS_TOKEN_SECRET }}\n  steps:\n    - uses: actions/checkout@v2\n    - uses: r-lib/actions/setup-r@v2\n    - name: Install rtweet package\n      run: Rscript -e 'install.packages(\"rtweet\")'\n    - name: Install devtools package\n      run: Rscript -e 'install.packages(\"devtools\")'\n    - name: Create and post tweet\n      run: Rscript tweet_art.R\n```\n\nYou can test this using the same method of clicking \"Run workflow\". Hopefully, your art is posted to Twitter. Depending on your setup, you'll have to play around with issues until it works.\n\nThe final part is setting up the schedule. You'll do this by changing the `workflow_dispatch:` line in the YAML file to a `schedule:` and adding in a [cron expression](https://crontab.guru/every-weekday). I really wanted the bot to post at a random time each day, but I couldn't figure out a clean set up for that. So I picked random-ish time throughout the day. These are set on UTC so I needed to add 5 hours to my EST time (or 4 for EDT). I use the date for the seed, so I needed to make sure every time was a different date on UTC and different on EST. You just need to watch your edge case if you care about that. Also, it takes a little while for the Github Action to run, so the times they're actually posted are often later.\n\n```yaml\nname: flowfieldfigmentsbot\non:\n  schedule:\n    - cron: '38 20 * * 0'\n    - cron: '34 16 * * 1'\n    - cron: '24 13 * * 2'\n    - cron: '54 21 * * 3'\n    - cron: '12 22 * * 4'\n    - cron: '7 19 * * 5'\n    - cron: '45 18 * * 6'\n  \n  jobs:\n  flowfieldsfigmentbot-post:\n  runs-on: macOS-latest\n  env:\n    GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n    FFF_TWITTER_API_KEY: ${{ secrets.FFF_TWITTER_API_KEY }}\n    FFF_TWITTER_API_KEY_SECRET: ${{ secrets.FFF_TWITTER_API_KEY_SECRET }}\n    FFF_TWITTER_ACCESS_TOKEN: ${{ secrets.FFF_TWITTER_ACCESS_TOKEN }}\n    FFF_TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.FFF_TWITTER_ACCESS_TOKEN_SECRET }}\n  steps:\n    - uses: actions/checkout@v2\n    - uses: r-lib/actions/setup-r@v2\n    - name: Install rtweet package\n      run: Rscript -e 'install.packages(\"rtweet\")'\n    - name: Install devtools package\n      run: Rscript -e 'install.packages(\"devtools\")'\n    - name: Create and post tweet\n      run: Rscript tweet_art.R\n```\n\nThese times should match to:\n\nSunday 3:38 pm <br>\nMonday 11:34 am <br>\nTuesday 9:24 am <br>\nWednesday 4:54 pm <br>\nThursday 5:12 pm <br>\nFriday 2:07 pm <br>\nSaturday 1:45 pm\n\nSo now, your bot should be automatically posting generative art on your schedule!\n\n<hr>\n<center>\n<h2>Bonus</h2>\n</center>\n<hr>\n\nYou should be good to go at this point. However, there are a ton of options to speed up the process or add features. I picked a couple of them to try. \n\n### Add a timeout option\n\nYou can add an option to stop if the code takes too long. This has Github email an error, so I can check the code. You just need to add number of minutes this should take to the YAML file. \n\n```yaml\n#...\njobs:\n  flowfieldsfigmentbot-post:\n    runs-on: macOS-latest\n    timeout-minutes: 25\n#...    \n```\n\nNote, the time includes setup, creating the art, and posting, not just creating the art.\n\n### Use Linux for the runner\n\nThe Linux options are cheaper for private repositories. In the YAML file, you'll need to change out `runs-on:` and add some new calls for libraries. I think I needed these for using the mp4 output files and installing R packages. The libraries you need might be different.\n\n```yaml\n#...\njobs:\n  flowfieldsfigmentbot-post:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n      FFF_TWITTER_API_KEY: ${{ secrets.FFF_TWITTER_API_KEY }}\n      FFF_TWITTER_API_KEY_SECRET: ${{ secrets.FFF_TWITTER_API_KEY_SECRET }}\n      FFF_TWITTER_ACCESS_TOKEN: ${{ secrets.FFF_TWITTER_ACCESS_TOKEN }}\n      FFF_TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.FFF_TWITTER_ACCESS_TOKEN_SECRET }}\n    steps:\n      - uses: actions/checkout@v2\n      - name: install libavfilter-dev\n        run: |\n          sudo apt-get update\n          sudo apt-get install libavfilter-dev\n      - name: Install libcurl and libssl on Linux\n        run: 'sudo apt-get -y install libcurl4-openssl-dev'\n        shell: bash\n#...\n```\n\n### Add `renv` for caching\n\nYou can use the `renv` package to cache everything. \n\nYou'll need to run similar code in your R project then push to Github. This will save everything.\n\n```r\nlibrary(renv)\nrenv::init()\nrenv::snapshot()\n```\n\nThen in your YAML file, you need to add information to call the `actions/cache@v3` action. There are several different ways to set this up, so search around on the internet.\n\n```yaml\n#...\njobs:\n  flowfieldsfigmentbot-post:\n    runs-on: ubuntu-latest\n    timeout-minutes: 10\n    env:\n      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}\n      FFF_TWITTER_API_KEY: ${{ secrets.FFF_TWITTER_API_KEY }}\n      FFF_TWITTER_API_KEY_SECRET: ${{ secrets.FFF_TWITTER_API_KEY_SECRET }}\n      FFF_TWITTER_ACCESS_TOKEN: ${{ secrets.FFF_TWITTER_ACCESS_TOKEN }}\n      FFF_TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.FFF_TWITTER_ACCESS_TOKEN_SECRET }}\n    steps:\n      - uses: actions/checkout@v2\n      - name: install libavfilter-dev\n        run: |\n          sudo apt-get update\n          sudo apt-get install libavfilter-dev\n      - name: Install libcurl and libssl on Linux\n        run: 'sudo apt-get -y install libcurl4-openssl-dev'\n        shell: bash\n      - uses: r-lib/actions/setup-r@v2\n        with:\n          use-public-rspm: true  \n      - name: Set RENV_PATHS_ROOT\n        shell: bash\n        run: |\n          echo \"RENV_PATHS_ROOT=${{ runner.temp }}/renv\" >> $GITHUB_ENV\n      - name: Install and activate renv\n        run: |\n          if (!requireNamespace(\"renv\", quietly = TRUE)) install.packages(\"renv\")\n          renv::activate()\n        shell: Rscript {0}\n      - name: Get R and OS version\n        id: get-version\n        run: |\n          cat(\"##[set-output name=os-version;]\", sessionInfo()$running, \"\\n\", sep = \"\")\n          cat(\"##[set-output name=r-version;]\", R.Version()$version.string, sep = \"\")\n        shell: Rscript {0}\n      - name: Restore Renv package cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.RENV_PATHS_ROOT }}\n          key: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{ inputs.cache-version }}-${{ hashFiles('renv.lock') }}\n          restore-keys: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{inputs.cache-version }}-\n      - name: Restore packages\n        shell: Rscript {0}\n        run: |\n          renv::restore()\n      - name: Create and post tweet\n        run: Rscript tweet_art.R\n```\n\nThe `Set RENV_PATHS_ROOT` step provides information to the `Install and activate renv` step that sets up `renv`. The `Get R and OS version` step provides information for the `Restore Renv package cache` step to tell Github to use the cache. Finally, `Restore packages` step uses `renv` to access the saved information. Part of this code looks up the runner system. This was useful when I switched between `mac-os-latest` and `ubuntu-latest`. So you might not need the exact same code.\n\nSometimes when you make enough changes, the cache needs to be reset (or the first time you try this). You'll get an error message in the logs like 'Cache not found for input keys:'. Your code is probably fine it just needs to reload everything. This will take longer than normal runs. So make sure your time-out option accounts for that.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}